cmake_minimum_required(VERSION 2.8)

set(CMAKE_BUILD_TYPE Release CACHE STRING "Build type.")
project(SSVAutoUpdater)

set(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wextra -W -pedantic" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3" CACHE STRING "" FORCE)
set(CMAKE_CXX_FLAGS_DEBUG "-fno-omit-frame-pointer -g3 -gdwarf-2 -O0" CACHE STRING "" FORCE)
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/modules/;${CMAKE_MODULE_PATH}")
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/extlibs/SSVJsonCpp/cmake/modules/;${CMAKE_MODULE_PATH}")
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/extlibs/SSVUtils/cmake/modules/;${CMAKE_MODULE_PATH}")
set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/extlibs/SSVUtilsJson/cmake/modules/;${CMAKE_MODULE_PATH}")

set(SFML_STATIC_LIBRARIES FALSE CACHE BOOL "Look for static SFML libraries.")
find_package(SFML 2 COMPONENTS audio graphics window system network)
if(NOT SFML_FOUND)
	set(SFML_INCLUDE_DIR "" CACHE STRING "SFML2 include directory")
	set(SFML_SYSTEM_LIBRARY "" CACHE STRING "SFML2 System library file")
	set(SFML_WINDOW_LIBRARY "" CACHE STRING "SFML2 Window library file")
	set(SFML_GRAPHICS_LIBRARY "" CACHE STRING "SFML2 Graphics library file")
	set(SFML_NETWORK_LIBRARY "" CACHE STRING "SFML2 Network library file")
	set(SFML_AUDIO_LIBRARY "" CACHE STRING "SFML2 Audio library file")
	message("\n-> SFML directory not found. Set include and libraries manually.")
endif()

find_package(SSVJsonCpp REQUIRED)
find_package(SSVUtils REQUIRED)
find_package(SSVUtilsJson REQUIRED)

file(GLOB SRC_LIST "./*.cpp" "./*.h")

include_directories("./")
include_directories("./Utils/")
include_directories(${SFML_INCLUDE_DIR})
include_directories(${SSVJSONCPP_INCLUDE_DIR})
include_directories(${SSVUTILS_INCLUDE_DIR})
include_directories(${SSVUTILSJSON_INCLUDE_DIR})
add_executable(${PROJECT_NAME} ${SRC_LIST})
target_link_libraries(SSVAutoUpdater ${SFML_SYSTEM_LIBRARY})
target_link_libraries(SSVAutoUpdater ${SFML_NETWORK_LIBRARY})
target_link_libraries(SSVAutoUpdater ${SSVJSONCPP_LIBRARY})
target_link_libraries(SSVAutoUpdater ${SSVUTILS_LIBRARY})
target_link_libraries(SSVAutoUpdater ${SSVUTILSJSON_LIBRARY})

if(UNIX)
	install(TARGETS SSVAutoUpdater RUNTIME DESTINATION ${CMAKE_SOURCE_DIR}/_RELEASE/)
else(WIN32)
	install(TARGETS SSVAutoUpdater RUNTIME DESTINATION ./_RELEASE/)
endif()
